#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server-sanjevani:server');
var http = require('http');
var SocketIo=require('socket.io');
var cors=require('cors');
var jwtAuth=require('socketio-jwt-auth');
var Admin=require('../models/admin');
var Foreign=require('../models/foreign');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8083');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);



const io=SocketIo(server,{
  handlePreflightRequest: (req, res) => {
      const headers = {
          "Access-Control-Allow-Headers": "Content-Type, Authorization,x-auth-token",
          "Access-Control-Allow-Origin": req.headers.origin, //or the specific origin you want to give access to,
          "Access-Control-Allow-Credentials": true
      };
      res.writeHead(200, headers);
      res.end();
  }
});





io.use(jwtAuth.authenticate({
  secret:process.env.SECRET_KEY
},function(payload,done){
console.log(payload);
  if(payload )
  {


  Admin.findOne({_id:payload._id},function(err,user){
    if(err)
        return done(err);
    if(!user)
      return done(null,false,'user does not exist');
    
    return done(null,user);
  });

}

else
{
  return done();
}

}));


let interval;



io.on("connection",(socket) => {
  console.log("New client connected");
  console.log(socket.request.user);
  if (interval) {
    clearInterval(interval);
  }
  interval = setInterval(() => getApiAndEmit(socket), 1000);
  socket.on("disconnect", () => {
    console.log("Client disconnected");
    clearInterval(interval); 
  });
});


const getForeignData=(socket)=>{

let res=[];

Foreign.find({'district':socket.request.user.district,'state':socket.request.user.state})
.then((data)=>{
  res=data;

  socket.emit("FromAPI", res);
  console.log(res);
})
.catch((error)=>console.log(error));

}

const getApiAndEmit = async (socket) => {

  let response=new Array();

  console.log('entered');

 response=await getForeignData(socket);

 console.log('returned');

  console.log(response);

  // socket.emit("FromAPI", response);
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
